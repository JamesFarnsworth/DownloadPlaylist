//{$APPTYPE GUI} //Hides console window
program DownloadPlaylist;

{$mode objfpc}{$H+}

uses
  Classes,
  //fileutil,
  StrUtils,
  SysUtils;
const
  playlistName = 'James'' PC';
  iTunesFolderLocation = 'Z:\Music\iTunes';
  destinationFolder = 'D:\Music';

type tTrack :
  ID : integer;
  srcAddress : string;
  destAddress : string;
  title : string;
  number : integer;

type tSrc :
  iTunesFolder : string;
  SlashType

type tDest :
    folder : string

var
  noOfTrackIDs, noOfTrackSourceAddresses, noOfTrackArtists, i, i2 : integer;
  libraryFile : TextFile;
  currentLine : string;
  srcSlashType : char;
  destSlashType : char;
  trackIDs : array of integer;
  trackSourceAddresses : array of string;
  trackArtists : array of string;

function FileCopy(Source, Target: string): boolean;
// Copies source to target; overwrites target.
// Caches entire file content in memory.
// Returns true if succeeded; false if failed.
var
  MemBuffer: TMemoryStream;
begin
  result := false;
  MemBuffer := TMemoryStream.Create;
  try
    MemBuffer.LoadFromFile(Source);
    MemBuffer.SaveToFile(Target);
    result := true
  except
    //swallow exception; function result is false by default
  end;
  // Clean up
  MemBuffer.Free
end;

function expandHexChars(input: string): string;
begin
  result := leftstr(input, Pos('%', input) - 1) + chr(Hex2Dec(MidStr(input, Pos('%', input) + 1, 2))) + rightstr(input, length(input) - Pos('%', input) - 2);
end;

procedure openLibraryFileForRead(location : string);
begin
  assignfile(libraryFile, location);
  reset(libraryFile);
end;

begin
  noOfTrackIDs := 0;
  openLibraryFileForRead(iTunesFolderLocation + '\iTunes Music Library.xml');
  while not ((Pos(playlistName, currentLine) <> 0) or eof(libraryFile)) do //whilst the playlist name isn't in the current line
  begin
    readln(libraryFile, currentLine);
  end;
  if eof(libraryFile) then halt;

  //read what track ids are in the playlist
  while not ((Pos('</array>', currentLine) <> 0) or eof(libraryFile)) do //whilst the end of the array of track IDs in the XML isn't reached
  begin
    //keep skipping through the file until the track ID is found
    repeat readln(libraryFile, currentLine) until (Pos('Track ID', currentLine) <> 0) or (Pos('</array>', currentLine) <> 0);
    if (Pos('Track ID', currentLine) <> 0) and (Pos('</integer>', currentLine) <> 0) then //If there's 'Track ID' and fully enclosed integer tags on currentLine
    begin
      inc(noOfTrackIDs);
      setLength(trackIDs, noOfTrackIDs); //add the new track ID - found between '<integer>' and '</integer>'
      trackIDs[noOfTrackIDs - 1] := strtoint(MidStr(currentLine, Pos('<integer>', currentLine) + 9, Pos('</integer>', currentLine) - (Pos('<integer>', currentLine) + 9)));
    end;
  end;
  if eof(libraryFile) then halt;

  reset(libraryFile);

  noOfTrackSourceAddresses := 0;
  for i := 0 to noOfTrackIDs - 1 do
  begin
    repeat  //search through until specific track id found
      readln(libraryFile, currentLine);
      if Pos('<key>Playlists</key>', currentLine) <> 0 then reset(libraryFile); //go back to beginning if playlist section reached
    until (Pos('<key>Track ID</key><integer>' + inttostr(TrackIDs[i]) + '</integer>', currentLine) <> 0);
    repeat
      readln(libraryFile, currentLine)
    until (Pos('<key>Artist</key><string>', currentLine) <> 0);   //read track artists into TrackArtists array
    inc(noOfTrackArtists);
    setlength(TrackArtists, noOfTrackArtists);
    TrackArtists[NoOfTrackArtists - 1] := midstr(currentLine, Pos('<key>Artist</key><string>', currentLine) + length('<key>Artist</key><string>'), Pos('</string>', currentLine) - Pos('<key>Artist</key><string>', currentLine) - length('<key>Artist</key><string>'));
    while (Pos('<key>Location</key><string>', currentLine) = 0) do
    begin                               //search for the location attribute
      readln(libraryFile, currentLine);
    end;
    inc(noOfTrackSourceAddresses);
    setLength(trackSourceAddresses, noOfTrackSourceAddresses);
    trackSourceAddresses[noOfTrackSourceAddresses - 1] := midStr(currentLine, Pos('file://', currentLine) + length('file://'), length(currentLine) - Pos('file://', currentLine) - length('file://') - length('</string>') + 1);
    i2 := length('/iTunes/');
    while Pos('/iTunes/', rightstr(trackSourceAddresses[noOfTrackSourceAddresses - 1], i2)) = 0 do
    begin     //find the last iTunes directory in the file address - this will be the iTunes folder
      inc(i2);
    end;           //convert slashes into the type which the user has used
    inc(i2);
    if (Pos('/', iTunesFolderLocation) <> 0) and (Pos('\', iTunesFolderLocation) <> 0) then
      writeln('You cannot use both types of slashes in the folder location - use the correct type for your OS')
    else if (Pos('/', iTunesFolderLocation) <> 0) then
      while (Pos('\', trackSourceAddresses[noOfTrackSourceAddresses - 1]) <> 0) do trackSourceAddresses[noOfTrackSourceAddresses - 1][Pos('\', trackSourceAddresses[noOfTrackSourceAddresses - 1])] := '/'
    else if (Pos('\', iTunesFolderLocation) <> 0) then
      while (Pos('/', trackSourceAddresses[noOfTrackSourceAddresses - 1]) <> 0) do trackSourceAddresses[noOfTrackSourceAddresses - 1][Pos('/', trackSourceAddresses[noOfTrackSourceAddresses - 1])] := '\';
    trackSourceAddresses[noOfTrackSourceAddresses - 1] := iTunesFolderLocation + rightstr(trackSourceAddresses[noOfTrackSourceAddresses - 1], i2 - length('/iTunes/'));
  end;

  for i := 0 to noOfTrackSourceAddresses - 1 do
  begin
    while (Pos('%', trackSourceAddresses[i]) <> 0) do        //converts hex character codes into characters eg. %20
    begin
      trackSourceAddresses[i] := expandHexChars(trackSourceAddresses[i]);
    end;
  end;

  for i := 0 to noOfTrackIDs - 1 do writeln(inttostr(TrackIDs[i]) + ', ' + trackSourceAddresses[i]);

  //TODO: code to delete previous files
  for i:= 0 to noOfTrackSourceAddresses  - 1 do
  begin
    if not DirectoryExists(destinationFolder + '\' + TrackArtists[i]) then
    begin
      if not CreateDir(destinationFolder + '\' + TrackArtists[i])then
        writeln('Failed to create artist directory')
      else
        writeln('Created artist directory ' + TrackArtists[i]);
    end;
    i2 := length(trackSourceAddresses[i]);
    while not (trackSourceAddresses[i][i2] = '\') do dec(i2);
    i2 := length(trackSourceAddresses[i]) - i2;
    if fileexists(destinationFolder + '\' + TrackArtists[i] + '\' + rightstr(trackSourceAddresses[i], i2)) then
      writeln('File already exists')
    else
    begin
      if not FileCopy(trackSourceAddresses[i], destinationFolder + '\' + TrackArtists[i] + '\' + rightstr(trackSourceAddresses[i], i2)) then
        writeln('Failed to copy')
      else writeln('Copied ' + trackSourceAddresses[i]);
    end;
  end;
end.